name: M1 Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the release (e.g., vM1)"
        required: true
        type: string
      name:
        description: "Release name (defaults to tag if empty)"
        required: false
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: Build and Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, windows-latest]

    defaults:
      run:
        shell: bash
        working-directory: milestones/m1-hello-javafx

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Verify Gradle
        run: ./gradlew --version

      - name: Build + Test + Code Checks
        run: ./gradlew clean test spotlessCheck spotbugsMain spotbugsTest --no-daemon --stacktrace

      - name: Package runtime image and installer (jlink + jpackage)
        run: ./gradlew jlink jpackage --no-daemon --stacktrace

      - name: Upload artifacts (jpackage output)
        uses: actions/upload-artifact@v4
        with:
          name: m1-${{ matrix.os }}-jpackage
          path: |
            milestones/m1-hello-javafx/build/jpackage/**
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts (M1 only)
        uses: actions/download-artifact@v4
        with:
          pattern: m1-*
          path: release-assets
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:" && ls -R release-assets || true

      - name: Compute artifact file list (zip/exe)
        id: files
        run: |
          set -euo pipefail
          # Find only files we care about (flattened by download-artifact with merge)
          FILES=$(find release-assets -type f \( -name "*.zip" -o -name "*.exe" \) -maxdepth 2)
          echo "Found files:\n$FILES"
          echo "ARTIFACTS<<EOF" >> $GITHUB_ENV
          echo "$FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.tag }}
          name: ${{ inputs.name || inputs.tag }}
          prerelease: ${{ inputs.prerelease }}
          allowUpdates: true
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: ${{ env.ARTIFACTS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
