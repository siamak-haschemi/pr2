name: Milestone Build and Release

on:
  workflow_dispatch:
    inputs:
      milestone:
        description: "Select milestone directory"
        required: true
        type: choice
        options:
          - m1-hello-javafx
          - m2-exceptions-and-testing
      tag:
        description: "Tag for the release (e.g., vM1)"
        required: true
        type: string
      name:
        description: "Release name (defaults to tag if empty)"
        required: false
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: Build and Package (${{ inputs.milestone }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, windows-latest]

    defaults:
      run:
        shell: bash
        working-directory: milestones/${{ inputs.milestone }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build + Test + Code Checks
        run: ./gradlew clean spotlessCheck spotbugsMain spotbugsTest test --no-daemon --stacktrace

      - name: Package application (jpackage)
        run: ./gradlew jpackage --no-daemon --stacktrace

      - name: Show jpackage output tree
        run: |
          echo "Listing build/jpackage (if exists)";
          if [ -d build/jpackage ]; then ls -la build/jpackage; fi

      - name: macOS - Zip .app bundle (if present)
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          # Find first .app anywhere under build/jpackage
          APP_PATH=$(find build/jpackage -maxdepth 3 -type d -name "*.app" -print -quit || true)
          if [ -n "${APP_PATH}" ]; then
            echo "Found app: ${APP_PATH}"
            APP_NAME=$(basename "${APP_PATH}")
            APP_PARENT=$(dirname "${APP_PATH}")
            (cd "${APP_PARENT}" && ditto -c -k --sequesterRsrc --keepParent "${APP_NAME}" "${APP_NAME}.zip")
            mv "${APP_PARENT}/${APP_NAME}.zip" build/jpackage/
            ls -l build/jpackage
          else
            echo "No .app bundle found, skipping zip"
          fi

      - name: macOS - Preflight .app.zip exists
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          if ls build/jpackage/*.app.zip 1>/dev/null 2>&1; then
            echo "OK: found app zip"
          else
            echo "ERROR: No .app.zip found after jpackage. Contents:" >&2
            if [ -d build/jpackage ]; then ls -R build/jpackage >&2; fi
            exit 1
          fi

      - name: macOS - Upload zipped .app
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.milestone }}-macos-app
          path: |
            build/jpackage/*.app.zip
          if-no-files-found: warn

      - name: Windows - Locate .exe installer
        if: runner.os == 'Windows'
        run: |
          set -euo pipefail
          EXE_PATH=$(find build/jpackage -maxdepth 3 -type f -name "*-*.exe" -print -quit || true)
          if [ -n "${EXE_PATH}" ]; then
            echo "Found exe: ${EXE_PATH}"
            EXE_NAME=$(basename "${EXE_PATH}")
            EXE_PARENT=$(dirname "${EXE_PATH}")
            if [ "${EXE_PARENT}" != "build/jpackage" ]; then
              cp "${EXE_PATH}" build/jpackage/
            fi
            ls -l build/jpackage
          else
            echo "ERROR: No *-*.exe found under build/jpackage after jpackage." >&2
            if [ -d build/jpackage ]; then ls -R build/jpackage >&2; fi
            exit 1
          fi

      - name: Windows - Upload .exe installer only
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.milestone }}-windows-exe
          path: |
            build/jpackage/*-*.exe
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts for selected milestone
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.milestone }}-*
          path: release-assets
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:" && ls -R release-assets || true

      - name: Compute artifact file list (zip/exe)
        id: files
        run: |
          set -euo pipefail
          # Find only files we care about (flattened by download-artifact with merge)
          FILES=$(find release-assets -type f \( -name "*.zip" -o -name "*.exe" \) -maxdepth 2)
          echo "Found files:\n$FILES"
          echo "ARTIFACTS<<EOF" >> $GITHUB_ENV
          echo "$FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.tag }}
          name: ${{ inputs.name || inputs.tag }}
          prerelease: ${{ inputs.prerelease }}
          allowUpdates: true
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: ${{ env.ARTIFACTS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
